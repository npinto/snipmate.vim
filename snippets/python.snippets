snippet #!
	#!/usr/bin/env python

snippet imp
	import ${1:module}
# Module Docstring
snippet docs
	'''
	File: ${1:`Filename('$1.py', 'foo.py')`}
	Author: ${2:`g:snips_author`}
	Description: ${3}
	'''
snippet wh
	while ${1:condition}:
		${2:# code...}
snippet for
	for ${1:needle} in ${2:haystack}:
		${3:# code...}
# New Class
snippet cl
	class ${1:ClassName}(${2:object}):
		"""${3:XXX docstring for $1}"""
		def __init__(self, ${4:arg}):
			${5:super($1, self).__init__()}
			self.$4 = $4
			${6}
# New Function
snippet def
	def ${1:fname}(${2:`indent('.') ? 'self' : ''`}):
		"""${3:XXX docstring for $1}"""
		${4:pass}
snippet deff
	def ${1:fname}(${2:`indent('.') ? 'self' : ''`}):
		${3}
# New Method
snippet defs
	def ${1:mname}(self, ${2:arg}):
		${3:pass}
# New Property
snippet property
	def ${1:foo}():
		doc = "${2:The $1 property.}"
		def fget(self):
			${3:return self._$1}
		def fset(self, value):
			${4:self._$1 = value}
# Lambda
snippet ld
	${1:var} = lambda ${2:vars} : ${3:action}
snippet .
	self.
snippet try Try/Except
	try:
		${1:pass}
	except ${2:Exception}, ${3:e}:
		${4:raise $3}
snippet try Try/Except/Else
	try:
		${1:pass}
	except ${2:Exception}, ${3:e}:
		${4:raise $3}
	else:
		${5:pass}
snippet try Try/Except/Finally
	try:
		${1:pass}
	except ${2:Exception}, ${3:e}:
		${4:raise $3}
	finally:
		${5:pass}
snippet try Try/Except/Else/Finally
	try:
		${1:pass}
	except ${2:Exception}, ${3:e}:
		${4:raise $3}
	else:
		${5:pass}
	finally:
		${6:pass}
# if __name__ == '__main__':
snippet ifmain
	if __name__ == '__main__':
		${1:main()}
# __magic__
snippet _
	__${1:init}__${2}
#
snippet utf8
	# -*- coding: utf-8 -*-
#
snippet path
	from os import path
#
snippet glob
	from glob import glob
#
snippet pdb
	import pdb; pdb.set_trace()
#
snippet ipdb
	import ipdb; ipdb.set_trace()
#
snippet pudb
	import pudb; pudb.set_trace()
#
snippet ipshell
	import IPython; ipshell = IPython.embed; ipshell(banner1='ipshell')
#
snippet np
	import numpy as np
#
snippet sp
	import scipy as sp
#
snippet misc
	from scipy import misc
#
snippet pl
	import pylab as pl
#
snippet pkl
	import cPickle as pkl
#
snippet logging
	import logging
	logging.basicConfig(level=logging.INFO)
	log = logging.getLogger(__name__)
#
snippet warnnings
	import warnings
	warnings.filterwarnings('ignore')
#
snippet optparse
	import optparse

	usage = ("usage: %prog [options] "
			 "<param1> "
			 "... "
			 "<paramN> "
			 )

	parser = optparse.OptionParser(usage=usage)

	parser.add_option("--opt1",
					  default=False,
					  action="store_true",
					  help="overwrite file(s) if they exist(s) [default=%default]")

	thehelp = "Ziz iz da help [default=%default]"
	parser.add_option("--opt2",
					  default='opt2_default',
					  type=str,
					  help=thehelp)

	opts, args = parser.parse_args()

	if len(args) < 1:
		parser.print_help()

	else:
		param1 = args[0]
		param2 = args[1]
		foo(param1, param2, opt1=opts.opt1, opt2=opts.opt2)
#
snippet argparse
	import argparse

	description = ""
	parser = argparse.ArgumentParser(description=description)

	parser.add_argument(
			'modfunc',
			metavar='module.function',
			nargs='+',
			help="default='%(default)s'",
			elpilog='epilog',
	)

	parser.add_argument(
			'-i', '--int',
			type=int,
			default=1,
			help="default='%(default)s'",
	)

	parser.add_argument(
			'-s', '--str',
			default='XXX',
			help="default='%(default)s'",
	)

	parser.add_argument(
			'-b', '--bool',
			default=False,
			action='store_true',
			help="default='%(default)s'",
	)

	args = parser.parse_args()

	func(
		args.a,
		kw1=args.kw1,
		# ...
	)
#
snippet lprun
	get_ipython().define_magic('lprun', line_profiler.magic_lprun)
#
snippet lprun2
	import IPython, line_profiler; IPython.core.ipapi.get().define_magic('lprun', line_profiler.magic_lprun)
